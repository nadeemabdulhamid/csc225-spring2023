Efficient Sorts - Worksheet


TRACE 1
Describe what's happening:



 47 38 43 33 61  8  9 77 48 18
 38 47 33 43  8 61  9 77 18 48
 33 38 43 47  8  9 61 77 18 48
  8  9 33 38 43 47 61 77 18 48
  8  9 18 33 38 43 47 48 61 77  





TRACE 2
Describe what's happening:



 47 38 43 33 61  8  9 77 48 18
  9 38 43 33 18  8 47 77 48 61
  8  9 43 33 18 38 47 77 48 61
  8  9 43 33 18 38 47 61 48 77
  8  9 38 33 18 43 47 61 48 77
  8  9 38 33 18 43 47 48 61 77
  8  9 18 33 38 43 47 48 61 77




















    // stably merge a[lo .. mid] with a[mid+1 ..hi] 
    // using aux[lo .. hi]
    private static void merge(Comparable[] a, Comparable[] aux, 
				int lo, int mid, int hi) {
        // precondition: a[lo .. mid] and a[mid+1 .. hi] are sorted

        // copy to aux[]
        for (int k = lo; k <= hi; k++) {
            aux[k] = a[k]; 
        }

        // merge back to a[]
        int i = lo, j = mid+1;
        for (int k = lo; k <= hi; k++) {
            if      (i > mid)              a[k] = aux[j++];
            else if (j > hi)               a[k] = aux[i++];
            else if (less(aux[j], aux[i])) a[k] = aux[j++];
            else                           a[k] = aux[i++];
        }

        // postcondition: a[lo .. hi] is sorted
    }



    // mergesort a[lo..hi] using auxiliary array aux[lo..hi]
    private static void sort(Comparable[] a, Comparable[] aux, 
				int lo, int hi) {
        if (hi <= lo) return;
        int mid = lo + (hi - lo) / 2;
        sort(a, aux, lo, mid);
        sort(a, aux, mid + 1, hi);
        merge(a, aux, lo, mid, hi);
    }



    /**
     * Rearranges the array in ascending order.
     * @param a the array to be sorted
     */
    public static void sort(Comparable[] a) {
        Comparable[] aux = new Comparable[a.length];
        sort(a, aux, 0, a.length-1);
    }






    /**
     * Rearranges the array in ascending order
     * @param a the array to be sorted
     */
    public static void sort(Comparable[] a) {
        StdRandom.shuffle(a);
        sort(a, 0, a.length - 1);
    }

    // quicksort the subarray from a[lo] to a[hi]
    private static void sort(Comparable[] a, int lo, int hi) { 
        if (hi <= lo) return;
        int j = partition(a, lo, hi);
        sort(a, lo, j-1);
        sort(a, j+1, hi);
    }

    // partition the subarray a[lo..hi] so 
    // that a[lo..j-1] <= a[j] <= a[j+1..hi] and return the index j.
    private static int partition(Comparable[] a, int lo, int hi) {
        int i = lo;
        int j = hi + 1;
        Comparable v = a[lo];
        while (true) { 

            // find item on lo to swap
            while (less(a[++i], v)) {
                if (i == hi) break;
            }

            // find item on hi to swap
            while (less(v, a[--j])) {
                if (j == lo) break;  // redundant since
            }                        //  a[lo] = v acts as sentinel

            // check if pointers cross
            if (i >= j) break;

            exch(a, i, j);
        }

        // put partitioning item v at a[j]
        exch(a, lo, j);

        // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]
        return j;
    }
